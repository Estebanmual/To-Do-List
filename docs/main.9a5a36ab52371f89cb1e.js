(() => {
  const e = {
    948: (e, t, a) => { e.exports = `${a.p}assets/check-mark.cf523d68ad92423f8bc3..svg`; }, 217: (e, t, a) => { e.exports = `${a.p}assets/delete.dc4e461c0c2e14f60685..svg`; }, 71: (e, t, a) => { e.exports = `${a.p}assets/editIcon.3a016870a521060f5eab..svg`; }, 547: (e, t, a) => { e.exports = `${a.p}assets/three-dots.feaafa2d6a90b7c9253d..svg`; },
  }; const t = {}; function a(c) { const s = t[c]; if (void 0 !== s) return s.exports; const r = t[c] = { exports: {} }; return e[c](r, r.exports, a), r.exports; }a.g = (function () { if (typeof globalThis === 'object') return globalThis; try { return this || new Function('return this')(); } catch (e) { if (typeof window === 'object') return window; } }()), (() => { let e; a.g.importScripts && (e = `${a.g.location}`); const t = a.g.document; if (!e && t && (t.currentScript && (e = t.currentScript.src), !e)) { const c = t.getElementsByTagName('script'); c.length && (e = c[c.length - 1].src); } if (!e) throw new Error('Automatic publicPath is not supported in this browser'); e = e.replace(/#.*$/, '').replace(/\?.*$/, '').replace(/\/[^\/]+$/, '/'), a.p = e; })(), (() => {
    const e = [{ index: 0, completed: !1, description: 'Add your first task 0' }, { index: 1, completed: !0, description: 'This task is complete 1' }]; const t = () => { let t; return t = localStorage.getItem('localTasks') === null ? localStorage.setItem('localTasks', JSON.stringify(e)) : JSON.parse(localStorage.getItem('localTasks')), t; }; const c = a(547); const s = a(217); const r = a(71); const i = a(948); function o(e, t, a) { this.index = e, this.completed = t, this.description = a; } class n {
      static addTaskToList() { const e = document.getElementById('add-input'); e.addEventListener('keypress', ((a) => { const c = t(); const s = new o(c.length, !1, e.value); a.key === 'Enter' && (e.value !== '' && (a.preventDefault(), c.push(s), localStorage.clear(), localStorage.setItem('localTasks', JSON.stringify(c)), e.value = ''), l()); })); }

      static removeTaskOfList() { document.querySelectorAll('.delete-icon').forEach(((e) => { e.addEventListener('click', ((e) => { const a = t(); const c = e.target.id; e.preventDefault(), a.splice(c, 1), a.forEach(((e, t) => { e.index = t; })), localStorage.clear(), localStorage.setItem('localTasks', JSON.stringify(a)), l(); })); })); }

      static updateTaskOfList() { document.querySelectorAll('.edit-icon').forEach(((e) => { e.addEventListener('click', ((e) => { e.target.parentElement.previousElementSibling.lastChild.setAttribute('contenteditable', !0), e.target.src = i, e.target.className = 'saveEditTask'; document.querySelectorAll('.saveEditTask').forEach(((e) => { e.addEventListener('click', ((e) => { const a = e.target.parentElement.previousElementSibling.lastChild; const c = e.target.parentElement.previousElementSibling.textContent; const s = Number(e.target.id); const i = t(); i.forEach(((e) => { s === e.index && (e.description = c, localStorage.clear(), localStorage.setItem('localTasks', JSON.stringify(i)), a.setAttribute('contenteditable', !1)); })), e.target.src = r, e.target.className = 'edit-icon', l(); })); })); })); })); }
    } function l() { const e = t(); document.querySelector('.tasks-list').innerHTML = '', e.forEach(((e) => { !(function (e) { const t = document.querySelector('.tasks-list'); const a = document.createElement('li'); a.innerHTML = `\n  <span><input type="checkbox" name="checkbox" class="checkbox" id="${e.index}"><p class="task-description" id="${e.index}" contenteditable="false">${e.description}</p></span> <span><img src="${r}" class="edit-icon" id="${e.index}" alt="edit icon"><img src="${s}" class="delete-icon" id="${e.index}" alt="delete icon"><img src="${c}" alt="three dots"><span>\n  `, t.appendChild(a); }(e)); })), n.addTaskToList(), n.removeTaskOfList(), n.updateTaskOfList(), (function () { const e = document.querySelectorAll('.checkbox'); const a = t(); a.forEach(((e) => { if (!0 === e.completed) { const t = e.index; const a = document.getElementById(`${t}`); a.checked = !0, a.nextElementSibling.classList.add('checked-box'); } })), e.forEach(((e) => { e.addEventListener('change', ((e) => { !0 === e.target.checked ? (e.target.nextSibling.classList.add('checked-box'), a.forEach(((t) => { Number(e.target.id) === t.index && (t.completed = !0, localStorage.clear(), localStorage.setItem('localTasks', JSON.stringify(a))); }))) : !1 === e.target.checked && (e.target.nextSibling.classList.remove('checked-box'), a.forEach(((t) => { Number(e.target.id) === t.index && (t.completed = !1, localStorage.clear(), localStorage.setItem('localTasks', JSON.stringify(a))); }))); })); })); }()), document.querySelector('.clear-button').addEventListener('click', (() => { const e = t(); e.filter(((e) => !0 === e.completed)).forEach(((t) => { e.splice(t.index), e.forEach(((e, t) => { e.index = t; })), localStorage.clear(), localStorage.setItem('localTasks', JSON.stringify(e)), l(); })); })); }l();
  })();
})();